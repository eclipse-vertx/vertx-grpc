{{#vertxPackageName}}
package {{vertxPackageName}};
{{/vertxPackageName}}

import io.vertx.core.Future;
import io.vertx.core.Promise;
import io.vertx.core.Handler;
import io.vertx.core.http.HttpMethod;
import io.vertx.core.streams.ReadStream;
import io.vertx.core.streams.WriteStream;
import io.vertx.grpc.common.GrpcStatus;
import io.vertx.grpc.common.ServiceName;
import io.vertx.grpc.common.ServiceMethod;
import io.vertx.grpc.common.GrpcMessageDecoder;
import io.vertx.grpc.common.GrpcMessageEncoder;
import io.vertx.grpc.server.GrpcServerRequest;
import io.vertx.grpc.server.GrpcServer;
import io.vertx.grpc.server.Service;
import io.vertx.grpc.server.ServiceBuilder;
import io.vertx.codegen.annotations.GenIgnore;

import com.google.protobuf.Descriptors;

import java.util.LinkedList;
import java.util.ArrayList;
import java.util.List;

/**
 * <p>Base definition {{serviceName}} service.</p>
 */
@io.vertx.codegen.annotations.VertxGen
@io.vertx.grpc.common.annotations.GrpcClass(packageName = "{{packageName}}", name = "{{serviceName}}")
public interface {{className}} {

{{#unaryMethods}}

  @io.vertx.grpc.common.annotations.GrpcMethod(name = "{{methodName}}")
  @io.vertx.codegen.annotations.GenIgnore(io.vertx.codegen.annotations.GenIgnore.PERMITTED_TYPE)
  Future<{{outputType}}> {{vertxMethodName}}({{inputType}} request);
{{/unaryMethods}}
{{#unaryManyMethods}}

  @io.vertx.codegen.annotations.GenIgnore(io.vertx.codegen.annotations.GenIgnore.PERMITTED_TYPE)
  Future<ReadStream<{{outputType}}>> {{vertxMethodName}}({{inputType}} request);
{{/unaryManyMethods}}
{{#manyUnaryMethods}}

  @io.vertx.codegen.annotations.GenIgnore(io.vertx.codegen.annotations.GenIgnore.PERMITTED_TYPE)
  Future<{{outputType}}> {{vertxMethodName}}(ReadStream<{{inputType}}> request);
{{/manyUnaryMethods}}
{{#manyManyMethods}}

  @io.vertx.codegen.annotations.GenIgnore(io.vertx.codegen.annotations.GenIgnore.PERMITTED_TYPE)
  Future<ReadStream<{{outputType}}>> {{vertxMethodName}}(ReadStream<{{inputType}}> request);
{{/manyManyMethods}}
}
