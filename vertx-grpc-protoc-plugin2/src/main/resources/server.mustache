{{#vertxPackageName}}
package {{vertxPackageName}};
{{/vertxPackageName}}

import io.vertx.core.Future;
import io.vertx.core.Promise;
import io.vertx.core.Handler;
import io.vertx.core.http.HttpServerRequest;
import io.vertx.core.streams.ReadStream;
import io.vertx.core.streams.WriteStream;
import io.vertx.grpc.common.GrpcStatus;
import io.vertx.grpc.common.ServiceName;
import io.vertx.grpc.common.ServiceMethod;
import io.vertx.grpc.common.GrpcMessageDecoder;
import io.vertx.grpc.common.GrpcMessageEncoder;
import io.vertx.grpc.server.GrpcServerResponse;
import io.vertx.grpc.server.GrpcServer;

import java.util.ArrayList;
import java.util.List;

public class {{className}}  {

{{#allMethods}}
  public static final ServiceMethod<{{inputType}}, {{outputType}}> {{methodName}} = ServiceMethod.server(
    ServiceName.create("{{packageName}}", "{{serviceName}}"),
    "{{methodName}}",
    GrpcMessageEncoder.encoder(),
    GrpcMessageDecoder.decoder({{inputType}}.parser()));
  public static final ServiceMethod<{{inputType}}, {{outputType}}> {{methodName}}_JSON = ServiceMethod.server(
    ServiceName.create("{{packageName}}", "{{serviceName}}"),
    "{{methodName}}",
    GrpcMessageEncoder.json(),
    GrpcMessageDecoder.json(() -> {{inputType}}.newBuilder()));
{{/allMethods}}

  public interface {{serviceName}}Api {

{{#unaryMethods}}
    default Future<{{outputType}}> {{vertxMethodName}}({{inputType}} request) {
      throw new UnsupportedOperationException("Not implemented");
    }
    default void {{vertxMethodName}}({{inputType}} request, Promise<{{outputType}}> response) {
      {{vertxMethodName}}(request)
        .onSuccess(msg -> response.complete(msg))
        .onFailure(error -> response.fail(error));
    }
{{/unaryMethods}}
{{#unaryManyMethods}}
    default ReadStream<{{outputType}}> {{vertxMethodName}}({{inputType}} request) {
      throw new UnsupportedOperationException("Not implemented");
    }
    default void {{vertxMethodName}}({{inputType}} request, WriteStream<{{outputType}}> response) {
      {{vertxMethodName}}(request)
        .handler(msg -> response.write(msg))
        .endHandler(msg -> response.end())
        .resume();
    }
{{/unaryManyMethods}}
{{#manyUnaryMethods}}
    default Future<{{outputType}}> {{vertxMethodName}}(ReadStream<{{inputType}}> request) {
      throw new UnsupportedOperationException("Not implemented");
    }
    default void {{vertxMethodName}}(ReadStream<{{inputType}}> request, Promise<{{outputType}}> response) {
      {{vertxMethodName}}(request)
        .onSuccess(msg -> response.complete(msg))
        .onFailure(error -> response.fail(error));
    }
{{/manyUnaryMethods}}
{{#manyManyMethods}}
    default ReadStream<{{outputType}}> {{vertxMethodName}}(ReadStream<{{inputType}}> request) {
      throw new UnsupportedOperationException("Not implemented");
    }
    default void {{vertxMethodName}}(ReadStream<{{inputType}}> request, WriteStream<{{outputType}}> response) {
      {{vertxMethodName}}(request)
        .handler(msg -> response.write(msg))
        .endHandler(msg -> response.end())
        .resume();
    }
{{/manyManyMethods}}

{{#unaryMethods}}
    default {{serviceName}}Api bind_{{vertxMethodName}}(GrpcServer server) {
      return bind_{{vertxMethodName}}(server, io.vertx.grpc.common.WireFormat.PROTOBUF);
    }
    default {{serviceName}}Api bind_{{vertxMethodName}}(GrpcServer server, io.vertx.grpc.common.WireFormat format) {
      ServiceMethod<{{inputType}},{{outputType}}> serviceMethod;
      switch(format) {
        case PROTOBUF:
          serviceMethod = {{methodName}};
          break;
        case JSON:
          serviceMethod = {{methodName}}_JSON;
          break;
        default:
          throw new AssertionError();
      }
      server.callHandler(serviceMethod, request -> {
        Promise<{{outputType}}> promise = Promise.promise();
        request.handler(req -> {
          try {
            {{vertxMethodName}}(req, promise);
          } catch (RuntimeException err) {
            promise.tryFail(err);
          }
        });
        promise.future()
          .onFailure(err -> request.response().status(GrpcStatus.INTERNAL).end())
          .onSuccess(resp -> request.response().end(resp));
      });
      return this;
    }
{{/unaryMethods}}
{{#unaryManyMethods}}
    default {{serviceName}}Api bind_{{vertxMethodName}}(GrpcServer server) {
      return bind_{{vertxMethodName}}(server, io.vertx.grpc.common.WireFormat.PROTOBUF);
    }
    default {{serviceName}}Api bind_{{vertxMethodName}}(GrpcServer server, io.vertx.grpc.common.WireFormat format) {
      ServiceMethod<{{inputType}},{{outputType}}> serviceMethod;
      switch(format) {
        case PROTOBUF:
          serviceMethod = {{methodName}};
          break;
        case JSON:
          serviceMethod = {{methodName}}_JSON;
          break;
        default:
          throw new AssertionError();
      }
      server.callHandler(serviceMethod, request -> {
        request.handler(req -> {
          try {
            {{vertxMethodName}}(req, request.response());
          } catch (RuntimeException err) {
            request.response().status(GrpcStatus.INTERNAL).end();
          }
        });
      });
      return this;
    }
{{/unaryManyMethods}}
{{#manyUnaryMethods}}
    default {{serviceName}}Api bind_{{vertxMethodName}}(GrpcServer server) {
      return bind_{{vertxMethodName}}(server, io.vertx.grpc.common.WireFormat.PROTOBUF);
    }
    default {{serviceName}}Api bind_{{vertxMethodName}}(GrpcServer server, io.vertx.grpc.common.WireFormat format) {
      ServiceMethod<{{inputType}},{{outputType}}> serviceMethod;
      switch(format) {
        case PROTOBUF:
          serviceMethod = {{methodName}};
          break;
        case JSON:
          serviceMethod = {{methodName}}_JSON;
          break;
        default:
          throw new AssertionError();
      }
      server.callHandler(serviceMethod, request -> {
        Promise<{{outputType}}> promise = Promise.promise();
        promise.future()
          .onFailure(err -> request.response().status(GrpcStatus.INTERNAL).end())
          .onSuccess(resp -> request.response().end(resp));
        try {
          {{vertxMethodName}}(request, promise);
        } catch (RuntimeException err) {
          promise.tryFail(err);
        }
      });
      return this;
    }
{{/manyUnaryMethods}}
{{#manyManyMethods}}
    default {{serviceName}}Api bind_{{vertxMethodName}}(GrpcServer server) {
      return bind_{{vertxMethodName}}(server, io.vertx.grpc.common.WireFormat.PROTOBUF);
    }
    default {{serviceName}}Api bind_{{vertxMethodName}}(GrpcServer server, io.vertx.grpc.common.WireFormat format) {
      ServiceMethod<{{inputType}},{{outputType}}> serviceMethod;
      switch(format) {
        case PROTOBUF:
          serviceMethod = {{methodName}};
          break;
        case JSON:
          serviceMethod = {{methodName}}_JSON;
          break;
        default:
          throw new AssertionError();
      }
      server.callHandler(serviceMethod, request -> {
        try {
          {{vertxMethodName}}(request, request.response());
        } catch (RuntimeException err) {
          request.response().status(GrpcStatus.INTERNAL).end();
        }
      });
      return this;
    }
{{/manyManyMethods}}

    default {{serviceName}}Api bindAll(GrpcServer server) {
{{#methods}}
      bind_{{vertxMethodName}}(server);
{{/methods}}
      return this;
    }

    default {{serviceName}}Api bindAll(GrpcServer server, io.vertx.grpc.common.WireFormat format) {
{{#methods}}
      bind_{{vertxMethodName}}(server, format);
{{/methods}}
      return this;
    }
  }
}
