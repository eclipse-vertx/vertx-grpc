{{#packageName}}
package {{packageName}};
{{/packageName}}

import io.vertx.core.Future;
import io.vertx.core.Promise;
import io.vertx.core.Handler;
import io.vertx.core.http.HttpServerRequest;
import io.vertx.core.streams.ReadStream;
import io.vertx.core.streams.WriteStream;
import io.vertx.grpc.common.GrpcStatus;
import io.vertx.grpc.server.GrpcServer;
import io.vertx.grpc.server.GrpcServerResponse;

import java.util.ArrayList;
import java.util.List;

public class {{className}}  {
  public interface {{serviceName}}Api {
{{#unaryMethods}}
    default Future<{{outputType}}> {{methodName}}({{inputType}} request) {
      throw new UnsupportedOperationException("Not implemented");
    }
    default void {{methodName}}({{inputType}} request, Promise<{{outputType}}> response) {
      try {
        {{methodName}}(request)
          .onSuccess(msg -> response.complete(msg))
          .onFailure(error -> response.fail(error));
      } catch (Throwable err) {
        response.fail(err);
      }
    }
{{/unaryMethods}}
{{#unaryManyMethods}}
    default ReadStream<{{outputType}}> {{methodName}}({{inputType}} request) {
      throw new UnsupportedOperationException("Not implemented");
    }
    default void {{methodName}}({{inputType}} request, GrpcServerResponse<{{inputType}}, {{outputType}}> response) {
      try {
        {{methodName}}(request)
          .handler(msg -> response.write(msg))
          .endHandler(msg -> response.end())
          .exceptionHandler(err -> response.status(GrpcStatus.INTERNAL).end())
          .resume();
      } catch (Throwable err) {
        response.status(GrpcStatus.INTERNAL).end();
      }
    }
{{/unaryManyMethods}}
{{#manyUnaryMethods}}
    default Future<{{outputType}}> {{methodName}}(ReadStream<{{inputType}}> request) {
      throw new UnsupportedOperationException("Not implemented");
    }
    default void {{methodName}}(ReadStream<{{inputType}}> request, Promise<{{outputType}}> response) {
      try {
        {{methodName}}(request)
          .onSuccess(msg -> response.complete(msg))
          .onFailure(error -> response.fail(error));
      } catch (Throwable err) {
        response.fail(err);
      }
    }
{{/manyUnaryMethods}}
{{#manyManyMethods}}
    default ReadStream<{{outputType}}> {{methodName}}(ReadStream<{{inputType}}> request) {
      throw new UnsupportedOperationException("Not implemented");
    }
    default void {{methodName}}(ReadStream<{{inputType}}> request, GrpcServerResponse<{{inputType}}, {{outputType}}> response) {
      try {
        {{methodName}}(request)
          .handler(msg -> response.write(msg))
          .endHandler(msg -> response.end())
          .exceptionHandler(err -> response.status(GrpcStatus.INTERNAL).end())
          .resume();
      } catch (Throwable err) {
        response.status(GrpcStatus.INTERNAL).end();
      }
    }
{{/manyManyMethods}}

{{#unaryMethods}}
    default {{serviceName}}Api bind_{{methodName}}(GrpcServer server) {
      server.callHandler({{serviceName}}Grpc.{{methodNameGetter}}(), request -> {
        Promise<{{outputType}}> promise = Promise.promise();
        request.handler(req -> {{methodName}}(req, promise));
        promise.future()
          .onFailure(err -> request.response().status(GrpcStatus.INTERNAL).end())
          .onSuccess(resp -> request.response().end(resp));
      });
      return this;
    }
{{/unaryMethods}}
{{#unaryManyMethods}}
    default {{serviceName}}Api bind_{{methodName}}(GrpcServer server) {
      server.callHandler({{serviceName}}Grpc.{{methodNameGetter}}(), request -> {
        request.handler(req -> {{methodName}}(req, request.response()));
      });
      return this;
    }
{{/unaryManyMethods}}
{{#manyUnaryMethods}}
    default {{serviceName}}Api bind_{{methodName}}(GrpcServer server) {
      server.callHandler({{serviceName}}Grpc.{{methodNameGetter}}(), request -> {
        Promise<{{outputType}}> promise = Promise.promise();
        {{methodName}}(request, promise);
        promise.future()
          .onFailure(err -> request.response().status(GrpcStatus.INTERNAL).end())
          .onSuccess(resp -> request.response().end(resp));
      });
      return this;
    }
{{/manyUnaryMethods}}
{{#manyManyMethods}}
    default {{serviceName}}Api bind_{{methodName}}(GrpcServer server) {
      server.callHandler({{serviceName}}Grpc.{{methodNameGetter}}(), request -> {
        {{methodName}}(request, request.response());
      });
      return this;
    }
{{/manyManyMethods}}

    default {{serviceName}}Api bindAll(GrpcServer server) {
{{#methods}}
      bind_{{methodName}}(server);
{{/methods}}
      return this;
    }
  }
}
