{{#vertxPackageName}}
package {{vertxPackageName}};
{{/vertxPackageName}}

import io.vertx.core.Future;
import io.vertx.core.Handler;
import io.vertx.core.net.SocketAddress;
import io.vertx.grpc.client.GrpcClient;
import io.vertx.core.streams.ReadStream;
import io.vertx.core.streams.WriteStream;
import io.vertx.grpc.common.GrpcStatus;
import io.vertx.grpc.common.ServiceName;
import io.vertx.grpc.common.ServiceMethod;
import io.vertx.grpc.common.GrpcReadStream;
import io.vertx.grpc.common.GrpcWriteStream;
import io.vertx.grpc.common.GrpcMessageDecoder;
import io.vertx.grpc.common.GrpcMessageEncoder;

/**
 * <p>A client for invoking the {{serviceName}} gRPC service.</p>
 */
@io.vertx.codegen.annotations.VertxGen
public interface {{className}} {
{{#allMethods}}

  /**
   * {{methodName}} protobuf RPC client service method.
   */
  @io.vertx.codegen.annotations.GenIgnore(io.vertx.codegen.annotations.GenIgnore.PERMITTED_TYPE)
  ServiceMethod<{{outputType}}, {{inputType}}> {{methodName}} = ServiceMethod.client(
    ServiceName.create("{{packageName}}", "{{serviceName}}"),
    "{{methodName}}",
    GrpcMessageEncoder.encoder(),
    GrpcMessageDecoder.decoder({{outputType}}.parser()));
{{/allMethods}}

  /**
   * Json client service methods.
   */
  @io.vertx.codegen.annotations.GenIgnore(io.vertx.codegen.annotations.GenIgnore.PERMITTED_TYPE)
  final class Json {
{{#allMethods}}

    /**
     * {{methodName}} json RPC client service method.
     */
    public static final ServiceMethod<{{outputType}}, {{inputType}}> {{methodName}} = ServiceMethod.client(
      ServiceName.create("{{packageName}}", "{{serviceName}}"),
      "{{methodName}}",
      GrpcMessageEncoder.json(),
      GrpcMessageDecoder.json(() -> {{outputType}}.newBuilder()));
{{/allMethods}}
  }

  /**
   * Create and return a {{serviceName}} gRPC service client. The assumed wire format is Protobuf.
   *
   * @param client the gRPC client
   * @param host   the host providing the service
   * @return the configured client
   */
  static {{className}} create(GrpcClient client, SocketAddress host) {
    return new {{className}}Impl(client, host);
  }

  /**
   * Create and return a {{serviceName}} gRPC service client.
   *
   * @param client     the gRPC client
   * @param host       the host providing the service
   * @param wireFormat the wire format
   * @return the configured client
   */
  static {{className}} create(GrpcClient client, SocketAddress host, io.vertx.grpc.common.WireFormat wireFormat) {
    return new {{className}}Impl(client, host, wireFormat);
  }
{{#unaryMethods}}

  /**
   * Calls the {{methodName}} RPC service method.
   *
   * @param request the {{inputType}} request message
   * @return a future of the {{outputType}} response message
   */
  @io.vertx.codegen.annotations.GenIgnore(io.vertx.codegen.annotations.GenIgnore.PERMITTED_TYPE)
  Future<{{outputType}}> {{vertxMethodName}}({{inputType}} request);
{{/unaryMethods}}
{{#unaryManyMethods}}

  /**
   * Calls the {{methodName}} RPC service method.
   *
   * @param request the {{inputType}} request message
   * @return a future of the {{outputType}} response messages
   */
  @io.vertx.codegen.annotations.GenIgnore(io.vertx.codegen.annotations.GenIgnore.PERMITTED_TYPE)
  Future<GrpcReadStream<{{outputType}}>> {{vertxMethodName}}({{inputType}} request);
{{/unaryManyMethods}}
{{#manyUnaryMethods}}

  /**
   * Calls the {{methodName}} RPC service method.
   *
   * @param a handler that will be passed a stream to which the {{inputType}} request messages can be written to.
   * @return a future of the {{outputType}} response message
   */
  @io.vertx.codegen.annotations.GenIgnore(io.vertx.codegen.annotations.GenIgnore.PERMITTED_TYPE)
  Future<{{outputType}}> {{vertxMethodName}}(Handler<GrpcWriteStream<{{inputType}}>> handler);
{{/manyUnaryMethods}}
{{#manyManyMethods}}

  /**
   * Calls the {{methodName}} RPC service method.
   *
   * @param a handler that will be passed a stream to which the {{inputType}} request messages can be written to.
   * @return a future of the {{outputType}} response messages
   */
  @io.vertx.codegen.annotations.GenIgnore(io.vertx.codegen.annotations.GenIgnore.PERMITTED_TYPE)
  Future<GrpcReadStream<{{outputType}}>> {{vertxMethodName}}(Handler<GrpcWriteStream<{{inputType}}>> request);
{{/manyManyMethods}}
}

/**
 * The proxy implementation.
 */
class {{className}}Impl implements {{className}} {

  private final GrpcClient client;
  private final SocketAddress socketAddress;
  private final io.vertx.grpc.common.WireFormat wireFormat;

  {{className}}Impl(GrpcClient client, SocketAddress socketAddress) {
    this(client, socketAddress, io.vertx.grpc.common.WireFormat.PROTOBUF);
  }

  {{className}}Impl(GrpcClient client, SocketAddress socketAddress, io.vertx.grpc.common.WireFormat wireFormat) {
    this.client = java.util.Objects.requireNonNull(client);
    this.socketAddress = java.util.Objects.requireNonNull(socketAddress);
    this.wireFormat = java.util.Objects.requireNonNull(wireFormat);
  }

{{#unaryMethods}}
  public Future<{{outputType}}> {{vertxMethodName}}({{inputType}} request) {
    ServiceMethod<{{outputType}}, {{inputType}}> serviceMethod;
    switch (wireFormat) {
      case PROTOBUF:
        serviceMethod = {{methodName}};
        break;
      case JSON:
        serviceMethod = Json.{{methodName}};
        break;
      default:
        throw new AssertionError();
    }
    return client.request(socketAddress, serviceMethod).compose(req -> {
      req.end(request);
      return req.response().compose(resp -> resp.last());
    });
  }

{{/unaryMethods}}
{{#unaryManyMethods}}
  public Future<GrpcReadStream<{{outputType}}>> {{vertxMethodName}}({{inputType}} request) {
    ServiceMethod<{{outputType}}, {{inputType}}> serviceMethod;
    switch (wireFormat) {
      case PROTOBUF:
        serviceMethod = {{methodName}};
        break;
      case JSON:
        serviceMethod = Json.{{methodName}};
        break;
      default:
        throw new AssertionError();
    }
    return client.request(socketAddress, serviceMethod).compose(req -> {
      req.end(request);
      return req.response().flatMap(resp -> {
        if (resp.status() != null && resp.status() != GrpcStatus.OK) {
          return Future.failedFuture("Invalid gRPC status " + resp.status());
        } else {
          return Future.succeededFuture(resp);
        }
      });
    });
  }

{{/unaryManyMethods}}
{{#manyUnaryMethods}}
  public Future<{{outputType}}> {{vertxMethodName}}(Handler<GrpcWriteStream<{{inputType}}>> request) {
    ServiceMethod<{{outputType}}, {{inputType}}> serviceMethod;
    switch (wireFormat) {
      case PROTOBUF:
        serviceMethod = {{methodName}};
        break;
      case JSON:
        serviceMethod = Json.{{methodName}};
        break;
      default:
        throw new AssertionError();
    }
    return client.request(socketAddress, serviceMethod).compose(req -> {
      request.handle(req);
      return req.response().compose(resp -> resp.last());
    });
  }

{{/manyUnaryMethods}}
{{#manyManyMethods}}
  public Future<GrpcReadStream<{{outputType}}>> {{vertxMethodName}}(Handler<GrpcWriteStream<{{inputType}}>> request) {
    ServiceMethod<{{outputType}}, {{inputType}}> serviceMethod;
    switch (wireFormat) {
      case PROTOBUF:
        serviceMethod = {{methodName}};
        break;
      case JSON:
        serviceMethod = Json.{{methodName}};
        break;
      default:
        throw new AssertionError();
    }
    return client.request(socketAddress, serviceMethod).compose(req -> {
      request.handle(req);
      return req.response().flatMap(resp -> {
        if (resp.status() != null && resp.status() != GrpcStatus.OK) {
          return Future.failedFuture("Invalid gRPC status " + resp.status());
        } else {
          return Future.succeededFuture(resp);
        }
      });
    });
  }

{{/manyManyMethods}}
}
