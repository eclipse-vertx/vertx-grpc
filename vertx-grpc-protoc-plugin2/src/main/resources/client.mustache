{{#javaPackageFqn}}
package {{javaPackageFqn}};
{{/javaPackageFqn}}

import io.vertx.core.Future;
import io.vertx.core.Completable;
import io.vertx.core.Handler;
import io.vertx.core.net.SocketAddress;
import io.vertx.grpc.client.GrpcClient;
import io.vertx.core.streams.ReadStream;
import io.vertx.core.streams.WriteStream;
import io.vertx.grpc.common.GrpcStatus;
import io.vertx.grpc.common.ServiceName;
import io.vertx.grpc.common.ServiceMethod;
import io.vertx.grpc.common.GrpcMessageDecoder;
import io.vertx.grpc.common.GrpcMessageEncoder;

/**
 * <p>A client for invoking the {{serviceName}} gRPC service.</p>
 */
{{vertxGeneratorAnnotations}}
public interface {{clientFqn}} extends {{contractFqn}} {
{{#unaryUnaryMethods}}

  /**
   * Calls the {{methodName}} RPC service method.
   *
   * @param request the {{inputType}} request message
   * @return a future of the {{outputType}} response message
   */
  {{vertxGeneratorAnnotationIgnorePermitted}}
  Future<{{outputType}}> {{vertxMethodName}}({{inputType}} request);
{{/unaryUnaryMethods}}
{{#unaryManyMethods}}

  /**
   * Calls the {{methodName}} RPC service method.
   *
   * @param request the {{inputType}} request message
   * @return a future of the {{outputType}} response messages
   */
  {{vertxGeneratorAnnotationIgnorePermitted}}
  Future<ReadStream<{{outputType}}>> {{vertxMethodName}}({{inputType}} request);
{{/unaryManyMethods}}
{{#manyUnaryMethods}}

  /**
   * Calls the {{methodName}} RPC service method.
   *
   * @param completable a completable that will be passed a stream to which the {{inputType}} request messages can be written to.
   * @return a future of the {{outputType}} response message
   */
  {{vertxGeneratorAnnotationIgnore}}
  Future<{{outputType}}> {{vertxMethodName}}(Completable<WriteStream<{{inputType}}>> completable);

  /**
   * Calls the {{methodName}} RPC service method.
   *
   * @param streamOfMessages a stream of messages to be sent to the service
   * @return a future of the {{outputType}} response message
   */
  {{vertxGeneratorAnnotationIgnorePermitted}}
  default Future<{{outputType}}> {{vertxMethodName}}(ReadStream<{{inputType}}> streamOfMessages) {
    io.vertx.core.streams.Pipe<{{inputType}}> pipe = streamOfMessages.pipe();
    return {{vertxMethodName}}((result, error) -> {
        if (error == null) {
          pipe.to(result);
        } else {
          pipe.close();
        }
    });
  }
{{/manyUnaryMethods}}
{{#manyManyMethods}}

  /**
   * Calls the {{methodName}} RPC service method.
   *
   * @param compltable a completable that will be passed a stream to which the {{inputType}} request messages can be written to.
   * @return a future of the {{outputType}} response messages
   */
  {{vertxGeneratorAnnotationIgnore}}
  Future<ReadStream<{{outputType}}>> {{vertxMethodName}}(Completable<WriteStream<{{inputType}}>> completable);

  /**
   * Calls the {{methodName}} RPC service method.
   *
    * @param streamOfMessages a stream of messages to be sent to the service
   * @return a future of the {{outputType}} response messages
   */
  {{vertxGeneratorAnnotationIgnorePermitted}}
  default Future<ReadStream<{{outputType}}>> {{vertxMethodName}}(ReadStream<{{inputType}}> streamOfMessages) {
    io.vertx.core.streams.Pipe<{{inputType}}> pipe = streamOfMessages.pipe();
    return {{vertxMethodName}}((result, error) -> {
        if (error == null) {
          pipe.to(result);
        } else {
          pipe.close();
        }
    });
  }
{{/manyManyMethods}}
}
