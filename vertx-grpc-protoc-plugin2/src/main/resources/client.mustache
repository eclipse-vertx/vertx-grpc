{{#vertxPackageName}}
package {{vertxPackageName}};
{{/vertxPackageName}}

import io.vertx.core.Future;
import io.vertx.core.Handler;
import io.vertx.core.net.SocketAddress;
import io.vertx.grpc.client.GrpcClient;
import io.vertx.core.streams.ReadStream;
import io.vertx.core.streams.WriteStream;
import io.vertx.grpc.common.GrpcStatus;
import io.vertx.grpc.common.ServiceName;
import io.vertx.grpc.common.ServiceMethod;
import io.vertx.grpc.common.GrpcMessageDecoder;
import io.vertx.grpc.common.GrpcMessageEncoder;

public class {{className}} {

{{#allMethods}}
  public static final ServiceMethod<{{outputType}}, {{inputType}}> {{methodName}} = ServiceMethod.client(
    ServiceName.create("{{packageName}}", "{{serviceName}}"),
    "{{methodName}}",
    GrpcMessageEncoder.encoder(),
    GrpcMessageDecoder.decoder({{outputType}}.parser()));
{{/allMethods}}

  private final GrpcClient client;
  private final SocketAddress socketAddress;

  public {{className}}(GrpcClient client, SocketAddress socketAddress) {
    this.client = client;
    this.socketAddress = socketAddress;
  }

{{#unaryMethods}}
  public Future<{{outputType}}> {{vertxMethodName}}({{inputType}} request) {
    return client.request(socketAddress, {{methodName}}).compose(req -> {
      req.end(request);
      return req.response().compose(resp -> resp.last());
    });
  }

{{/unaryMethods}}
{{#unaryManyMethods}}
  public Future<ReadStream<{{outputType}}>> {{vertxMethodName}}({{inputType}} request) {
    return client.request(socketAddress, {{methodName}}).compose(req -> {
      req.end(request);
      return req.response().flatMap(resp -> {
        if (resp.status() != null && resp.status() != GrpcStatus.OK) {
          return Future.failedFuture("Invalid gRPC status " + resp.status());
        } else {
          return Future.succeededFuture(resp);
        }
      });
    });
  }

{{/unaryManyMethods}}
{{#manyUnaryMethods}}
  public Future<{{outputType}}> {{vertxMethodName}}(Handler<WriteStream<{{inputType}}>> request) {
    return client.request(socketAddress, {{methodName}}).compose(req -> {
      request.handle(req);
      return req.response().compose(resp -> resp.last());
    });
  }

{{/manyUnaryMethods}}
{{#manyManyMethods}}
  public Future<ReadStream<{{outputType}}>> {{vertxMethodName}}(Handler<WriteStream<{{inputType}}>> request) {
    return client.request(socketAddress, {{methodName}}).compose(req -> {
      request.handle(req);
      return req.response().flatMap(resp -> {
        if (resp.status() != null && resp.status() != GrpcStatus.OK) {
          return Future.failedFuture("Invalid gRPC status " + resp.status());
        } else {
          return Future.succeededFuture(resp);
        }
      });
    });
  }

{{/manyManyMethods}}
}
