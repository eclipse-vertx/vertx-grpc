{{#javaPackageFqn}}
package {{javaPackageFqn}};
{{/javaPackageFqn}}

import io.vertx.core.Future;
import io.vertx.core.Completable;
import io.vertx.core.Handler;
import io.vertx.core.net.SocketAddress;
import io.vertx.grpc.client.GrpcClient;
import io.vertx.core.streams.ReadStream;
import io.vertx.core.streams.WriteStream;
import io.vertx.grpc.common.GrpcStatus;
import io.vertx.grpc.common.ServiceName;
import io.vertx.grpc.common.ServiceMethod;
import io.vertx.grpc.common.GrpcMessageDecoder;
import io.vertx.grpc.common.GrpcMessageEncoder;

/**
 * <p>A client for invoking the {{serviceName}} gRPC service.</p>
 */
{{#codegenEnabled}}
@io.vertx.codegen.annotations.VertxGen
{{/codegenEnabled}}
public interface {{grpcClientFqn}} extends {{clientFqn}} {
{{#allMethods}}

  /**
   * {{methodName}} protobuf RPC client service method.
   */
  {{#codegenEnabled}}
  @io.vertx.codegen.annotations.GenIgnore(io.vertx.codegen.annotations.GenIgnore.PERMITTED_TYPE)
  {{/codegenEnabled}}
  ServiceMethod<{{outputType}}, {{inputType}}> {{methodName}} = ServiceMethod.client(
    ServiceName.create("{{packageName}}", "{{serviceName}}"),
    "{{methodName}}",
    GrpcMessageEncoder.encoder(),
    GrpcMessageDecoder.decoder({{outputType}}.newBuilder()));
{{/allMethods}}

  /**
   * Create and return a {{serviceName}} gRPC service client. The assumed wire format is Protobuf.
   *
   * @param client the gRPC client
   * @param host   the host providing the service
   * @return the configured client
   */
  static {{grpcClientFqn}} create(GrpcClient client, SocketAddress host) {
    return new {{grpcClientFqn}}Impl(client, host);
  }

  /**
   * Create and return a {{serviceName}} gRPC service client.
   *
   * @param client     the gRPC client
   * @param host       the host providing the service
   * @param wireFormat the wire format
   * @return the configured client
   */
  static {{grpcClientFqn}} create(GrpcClient client, SocketAddress host, io.vertx.grpc.common.WireFormat wireFormat) {
    return new {{grpcClientFqn}}Impl(client, host, wireFormat);
  }
}

/**
 * The proxy implementation.
 */
class {{grpcClientFqn}}Impl implements {{grpcClientFqn}} {

  private final GrpcClient client;
  private final SocketAddress socketAddress;
  private final io.vertx.grpc.common.WireFormat wireFormat;

  {{grpcClientFqn}}Impl(GrpcClient client, SocketAddress socketAddress) {
    this(client, socketAddress, io.vertx.grpc.common.WireFormat.PROTOBUF);
  }

  {{grpcClientFqn}}Impl(GrpcClient client, SocketAddress socketAddress, io.vertx.grpc.common.WireFormat wireFormat) {
    this.client = java.util.Objects.requireNonNull(client);
    this.socketAddress = java.util.Objects.requireNonNull(socketAddress);
    this.wireFormat = java.util.Objects.requireNonNull(wireFormat);
  }
{{#unaryUnaryMethods}}

  public Future<{{outputType}}> {{vertxMethodName}}({{inputType}} request) {
    return client.request(socketAddress, {{methodName}}).compose(req -> {
      req.format(wireFormat);
      return req.end(request).compose(v -> req.response().compose(resp -> resp.last()));
    });
  }
{{/unaryUnaryMethods}}
{{#unaryManyMethods}}

  public Future<ReadStream<{{outputType}}>> {{vertxMethodName}}({{inputType}} request) {
    return client.request(socketAddress, {{methodName}}).compose(req -> {
      req.format(wireFormat);
      return req.end(request).compose(v -> req.response().flatMap(resp -> {
        if (resp.status() != null && resp.status() != GrpcStatus.OK) {
          return Future.failedFuture(new io.vertx.grpc.client.InvalidStatusException(GrpcStatus.OK, resp.status()));
        } else {
          return Future.succeededFuture(resp);
        }
      }));
    });
  }
{{/unaryManyMethods}}
{{#manyUnaryMethods}}

  public Future<{{outputType}}> {{vertxMethodName}}(Completable<WriteStream<{{inputType}}>> completable) {
    return client.request(socketAddress, {{methodName}})
      .andThen((res, err) -> {
        if (err == null) {
          res.format(wireFormat);
        }
        completable.complete(res, err);
      })
      .compose(request -> {
        return request.response().compose(response -> response.last());
      });
  }
{{/manyUnaryMethods}}
{{#manyManyMethods}}

  public Future<ReadStream<{{outputType}}>> {{vertxMethodName}}(Completable<WriteStream<{{inputType}}>> completable) {
    return client.request(socketAddress, {{methodName}})
       .andThen((res, err) -> {
        if (err == null) {
          res.format(wireFormat);
        }
        completable.complete(res, err);
      })
     .compose(req -> {
        return req.response().flatMap(resp -> {
          if (resp.status() != null && resp.status() != GrpcStatus.OK) {
            return Future.failedFuture(new io.vertx.grpc.client.InvalidStatusException(GrpcStatus.OK, resp.status()));
          } else {
            return Future.succeededFuture(resp);
          }
        });
    });
  }
{{/manyManyMethods}}
}
