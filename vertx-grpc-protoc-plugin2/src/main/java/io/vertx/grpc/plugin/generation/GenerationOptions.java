package io.vertx.grpc.plugin.generation;

/**
 * Represents options for configuring code generation.
 * <p>
 * This class provides various configuration options to control the generation of code artifacts during the build or runtime process. Each option has a default value, and the
 * options can be customized using the provided setter methods.
 * <p>
 * Configuration options include flags for generating client code, service code, IO-related code, and transcoding, as well as annotations for the Vert.x code generator.
 * Additionally, a service prefix can be defined to customize the naming of services.
 */
public class GenerationOptions {

  /**
   * The default configuration for determining whether client generation should be enabled. By default, client generation is disabled.
   */
  public static final boolean DEFAULT_GENERATE_CLIENT = false;

  /**
   * Default value indicating whether the generation of service classes is enabled. By default, this is set to {@code false}, meaning service class generation is disabled unless
   * explicitly configured.
   */
  public static final boolean DEFAULT_GENERATE_SERVICE = false;

  /**
   * Specifies the default setting for whether IO-related files should be generated by the generation process. This flag serves as a default value for controlling the inclusion of
   * IO generation features. By default, it is set to {@code false}, indicating that IO-related files will not be generated unless explicitly enabled.
   */
  public static final boolean DEFAULT_GENERATE_IO = false;

  /**
   * Indicates whether transcoding generation is enabled by default. When set to true, it implies that the generation process should include support for transcoding features. This
   * is a configurable option in the generation process and can be overridden based on specific requirements.
   */
  public static final boolean DEFAULT_GENERATE_TRANSCODING = true;

  /**
   * A default configuration flag that determines whether Vert.x generator annotations should be included during the code generation process. By default, the value is set to false,
   * implying that the generator annotations are not added unless explicitly enabled.
   */
  public static final boolean DEFAULT_GENERATE_VERTX_GENERATOR_ANNOTATIONS = false;

  /**
   * The default prefix used for generated service files. This value serves as the initial prefix applied to service-related entities during the code generation process.
   */
  public static final String DEFAULT_SERVICE_PREFIX = "";

  private boolean generateClient;
  private boolean generateService;
  private boolean generateIo;
  private boolean generateTranscoding;
  private boolean generateVertxGeneratorAnnotations;
  private String servicePrefix;

  public GenerationOptions() {
    this.generateClient = DEFAULT_GENERATE_CLIENT;
    this.generateService = DEFAULT_GENERATE_SERVICE;
    this.generateIo = DEFAULT_GENERATE_IO;
    this.generateTranscoding = DEFAULT_GENERATE_TRANSCODING;
    this.generateVertxGeneratorAnnotations = DEFAULT_GENERATE_VERTX_GENERATOR_ANNOTATIONS;
    this.servicePrefix = DEFAULT_SERVICE_PREFIX;
  }

  /**
   * Determines if the generation of client-specific code is enabled.
   *
   * @return true if client generation is enabled, false otherwise
   */
  public boolean isGenerateClient() {
    return generateClient;
  }

  /**
   * Sets whether the client generation feature is enabled or disabled.
   *
   * @param generateClient a boolean value where {@code true} enables client generation and {@code false} disables it
   * @return the current {@code GenerationOptions} instance to allow method chaining
   */
  public GenerationOptions setGenerateClient(boolean generateClient) {
    this.generateClient = generateClient;
    return this;
  }

  /**
   * Determines whether service-related code generation is enabled.
   *
   * @return true if service generation is enabled; false otherwise
   */
  public boolean isGenerateService() {
    return generateService;
  }

  /**
   * Configures whether the service generation is enabled or disabled.
   *
   * @param generateService a boolean value indicating whether to enable (true) or disable (false) the generation of services.
   * @return the current instance of {@code GenerationOptions}, allowing for method chaining.
   */
  public GenerationOptions setGenerateService(boolean generateService) {
    this.generateService = generateService;
    return this;
  }

  /**
   * Determines if IO-related code generation is enabled.
   *
   * @return true if IO-related code should be generated, false otherwise.
   */
  public boolean isGenerateIo() {
    return generateIo;
  }

  /**
   * Sets the generation of IO files based on the given flag.
   *
   * @param generateIo a boolean flag that determines whether IO files should be generated
   * @return the current instance of GenerationOptions for method chaining
   */
  public GenerationOptions setGenerateIo(boolean generateIo) {
    this.generateIo = generateIo;
    return this;
  }

  /**
   * Determines whether the generation of transcoding features is enabled.
   *
   * @return true if transcoding generation is enabled, false otherwise.
   */
  public boolean isGenerateTranscoding() {
    return generateTranscoding;
  }

  /**
   * Sets whether transcoding generation is enabled or disabled.
   *
   * @param generateTranscoding a boolean indicating whether to enable (true) or disable (false) transcoding generation.
   * @return the current {@code GenerationOptions} instance to allow method chaining.
   */
  public GenerationOptions setGenerateTranscoding(boolean generateTranscoding) {
    this.generateTranscoding = generateTranscoding;
    return this;
  }

  /**
   * Determines whether Vert.x generator annotations should be generated.
   *
   * @return true if Vert.x generator annotations should be generated, false otherwise.
   */
  public boolean isGenerateVertxGeneratorAnnotations() {
    return generateVertxGeneratorAnnotations;
  }

  /**
   * Configures whether Vert.x generator annotations should be generated.
   *
   * @param generateVertxGeneratorAnnotations a boolean indicating whether to enable or disable the generation of Vert.x generator annotations
   * @return the updated {@code GenerationOptions} instance
   */
  public GenerationOptions setGenerateVertxGeneratorAnnotations(boolean generateVertxGeneratorAnnotations) {
    this.generateVertxGeneratorAnnotations = generateVertxGeneratorAnnotations;
    return this;
  }

  /**
   * Retrieves the service prefix used for naming or identification purposes in the context of the generation process.
   *
   * @return the service prefix as a {@code String}
   */
  public String getServicePrefix() {
    return servicePrefix;
  }

  /**
   * Sets the service prefix to be used for generation.
   *
   * @param servicePrefix the service prefix to set
   * @return the current instance of {@code GenerationOptions} for method chaining
   */
  public GenerationOptions setServicePrefix(String servicePrefix) {
    this.servicePrefix = servicePrefix;
    return this;
  }
}
